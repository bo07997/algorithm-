<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lin.dao.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.lin.model.Comment" >
    <id column="comment_id" property="commentId" jdbcType="INTEGER" />
    <result column="message_id" property="messageId" jdbcType="INTEGER" />
    <result column="blog_id" property="blogId" jdbcType="INTEGER" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="sort_id" property="sortId" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    comment_id, message_id, blog_id, time, sort_id, content
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>
  <!--获取全部评论  -->
    <select id="selectAll_root_comment" resultType="java.util.Map" >
   SELECT 
c.comment_id as commentId ,
c.message_id as messageId,
c.content as content ,
b.b_title as bTitle,
b.b_id AS bId,
 date_format(c.time,'%Y-%m-%d') as time ,
m.realname
FROM `comment` as c INNER JOIN blog as b 
on c.blog_id=b.b_id INNER JOIN message as m ON
c.message_id = m.message_id  order by time DESC;
  </select>
  <select id="selectBybId" resultType="com.lin.model.v2model.Comment_message" parameterType="java.lang.Integer" >
    select 
    a.blog_id as blogId,
     a.comment_id as id    , date_format(a.time,'%Y-%m-%d %H:%i:%S') as time   ,
     a.sort_id as sortID,a.content as content,b.realname as userName,
     b.head as head
      FROM  `comment` a LEFT JOIN message b
       ON a.message_id = b.message_id
    where a.blog_id =#{bId,jdbcType=INTEGER};
  </select>
 <!-- 获取某一博主的所有博客下的评论 -->
  <select id="selectAllComment" resultType="com.lin.model.v2model.Comment_Blog_User" parameterType="java.lang.Integer" >
  SELECT b.b_Id as bId,b.b_title as bTitle,u.u_id as uId,u.name as name,
date_format(c.time ,'%Y-%m-%d %H:%i:%S') as time ,c.comment_id  as commentId,
c.content  as commentContent
FROM `comment` as c INNER JOIN `user`  as u ON c.message_id = u.messageid 
INNER JOIN blog as b on c.blog_id = b.b_id
WHERE b.b_id IN(
SELECT b2.b_id FROM `user` as u2 INNER JOIN blog  as b2 ON 
u2.u_id = b2.u_id  WHERE u2.u_id =#{uId,jdbcType=INTEGER}  ORDER BY b_id);
  </select>
  
   <!-- 获取某一博主发表的所有评论 -->
  <select id="selectMyComment" resultType="com.lin.model.v2model.Comment_Blog_User" parameterType="java.lang.Integer" >
  SELECT b.b_Id as bId,b.b_title as bTitle,u.u_id as uId,u.name as name,
date_format(c.time ,'%Y-%m-%d %H:%i:%S') as time ,c.comment_id  as commentId,
c.content  as commentContent
FROM `comment` as c INNER JOIN `user`  as u ON c.message_id = u.messageid 
INNER JOIN blog as b on c.blog_id = b.b_id
WHERE c.message_id = #{uId,jdbcType=INTEGER};
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lin.model.Comment" >
    insert into comment (comment_id, message_id, blog_id, 
      time, sort_id, content
      )
    values (#{commentId,jdbcType=INTEGER}, #{messageId,jdbcType=INTEGER}, #{blogId,jdbcType=INTEGER}, 
      #{time,jdbcType=TIMESTAMP}, #{sortId,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lin.model.Comment"  useGeneratedKeys="true" keyProperty="commentId">
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        comment_id,
      </if>
      <if test="messageId != null" >
        message_id,
      </if>
      <if test="blogId != null" >
        blog_id,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="sortId != null" >
        sort_id,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="messageId != null" >
        #{messageId,jdbcType=INTEGER},
      </if>
      <if test="blogId != null" >
        #{blogId,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="sortId != null" >
        #{sortId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lin.model.Comment" >
    update comment
    <set >
      <if test="messageId != null" >
        message_id = #{messageId,jdbcType=INTEGER},
      </if>
      <if test="blogId != null" >
        blog_id = #{blogId,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="sortId != null" >
        sort_id = #{sortId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lin.model.Comment" >
    update comment
    set message_id = #{messageId,jdbcType=INTEGER},
      blog_id = #{blogId,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      sort_id = #{sortId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
</mapper>